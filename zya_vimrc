" Vundle start--------
set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Plugin 'gmark/vundle'

" Bundle后的插件名来自于http://vim-scripts.org/vim/scripts.html的Name列
" Add all your plugins here
" git submodule add https://github.com/Valloric/YouCompleteMe.git
" ~/.vim/bundle/YouCompleteMe
Plugin 'Valloric/YouCompleteMe'

" 折叠插件
Plugin 'tmhedberg/SimpylFold'

" 配色插件
Plugin 'jnurmine/Zenburn'

" 文件浏览,树形结构
Plugin 'scrooloose/nerdtree'

" 对上一个插件的补充,可用tab键
Plugin 'jistr/vim-nerdtree-tabs'

" 在vim中搜索任何文件
Plugin 'kien/ctrlp.vim'

" git插件
Plugin 'tpope/vim-fugitive'

" 工具栏
Plugin 'Lokaltog/vim-powerline'

" python代码检查flake8
Plugin 'nvie/vim-flake8'

" 语法检查
Plugin 'scrooloose/syntastic'

" 自动缩进符合PEP8标准
Plugin 'vim-scripts/indentpython.vim'

" 缩进指示线
Plugin 'Yggdroot/indentLine'

" 多行注释
Plugin 'scrooloose/nerdcommenter'

" python
Plugin 'python-mode/python-mode'

" Plugin 'altercation/vim-colors-solarized'

Plugin 'sjl/gundo.vim'

" 代码模板
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

" 语法高亮
Plugin 'octol/vim-cpp-enhanced-highlight'

" 在cpp和h之间切换,替换a.vim"
Plugin 'derekwyatt/vim-fswitch'

" All of your plugins must be added before the following line
call vundle#end()
filetype plugin indent on
" Vundle end----------

let python_highlight_all = 1

" 定义快捷键的前缀,即<Leader>
let mapleader=";"

" 设置快捷键将选中文本块复制至系统剪贴板
vnoremap <leader>y "+y
" 设置快捷键将系统剪贴板内容粘贴至VIM
nmap <leader>p "+p

" 定义快捷键关闭当前分割窗口
nmap <leader>q :q<CR>

" 定义快捷键保存当前窗口内容
nmap <leader>w :w<CR>

" 定义快捷键保存所有窗口内容并退出vim
nmap <leader>WQ :wa<CR>:q<CR>

" 不做任何保存,直接退出vim
nmap <leader>Q :qa!<CR>

" 依次遍历子窗口
nnoremap nw <C-W><C-W>

" 跳转至右方的窗口
nnoremap <leader>lw <C-W>l

" 跳转至左方的窗口
nnoremap <leader>hw <C-W>h

" 跳转至上方的窗口
nnoremap <leader>kw <C-W>k

" 跳转至下方的窗口
nnoremap <leader>jw <C-W>j

" 定义快捷键在结对符之间跳转,助记pair
nmap <leader>pa %

" 禁止光标闪烁
" set gcr=a:block-blinkon0

" 禁止显示滚动条
" set guioptions-=l
" set guioptions-=L
" set guioptions-=r
" set guioptions-=R

" 禁止显示菜单和工具条
" set guioptions-=m
" set guioptions-=T

"开启语法高亮
syntax on

"根据文件类型设置自动缩进
filetype indent plugin on

"显示当前的行号列号
set ruler

"在状态栏显示正在输入的命令
set showcmd

" vim自身命令行模式智能补全
set wildmenu

"关闭/打开配对括号高亮
"NoMatchParen
"DoMatchParen

"显示行号
set number

"为方便起见,用F2开启/关闭行号显示
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>

"启动modeline
set modeline

"为深色背景调整配色
set background=dark

"设置文件格式
set encoding=utf-8
set fileencoding=utf-8

"allow backspacing over everything in insert mode
set bs=indent,eol,start

"Tab宽度自动缩进字数
set ts=4
"空格代替制表符
set expandtab
%retab!

" 设置格式化时制表符占用空格数
set shiftwidth=4

" 设置编辑时制表符占用空格数
set tabstop=4

"自动缩进
set autoindent
set cindent
set smartindent

set t_Co=256
set nowrap
set history=500  "Keep 500 lines of command line history

"总是显示状态行
set laststatus=2

"距离顶部或底部5行
set scrolloff=5

"禁止生成临时文件
set nobackup
set noswapfile

"粘贴模式
:set pastetoggle=<F11>

" 突出显示当前行
set cursorline

" 突出显示当前列
set cursorcolumn

"搜索忽略大小写
set ignorecase

"搜索逐字符高亮
set hlsearch
set incsearch

" 定义函数SetTitle,自动插入文件
func SetTitle()
    call setline(1, "\/**")
    call setline(2, " * Copyright(c) 2017 Shenzhen shenbaise9527")
    call setline(3, " * All Rights Reserved")
    call setline(4, " * @File        : ".expand("%"))
    call setline(5, " * @Author      : shenbaise9527")
    call setline(6, " * @Create      : ".strftime("%Y-%m-%d %H:%M:%S"))
    call setline(7, " * @Modified    : ".strftime("%Y-%m-%d %H:%M:%S"))
    call setline(8, " * @version     : 1.0")
    call setline(9, " * @Description : ")
    call setline(10, " *\/")
    call setline(11, "")
    call setline(12, "")
    call setline(13, "")
endfunc

func DateModified()
    let zcur_line=line(".")
    let zcur_clo=virtcol(".")
    call cursor(1,1)
    if search('@Modified')!=0
        let line=line('.')
        if line<9
            call setline(line, " * @Modified    : ".strftime("%Y-%m-%d %H:%M:%S"))
        endif
    endif
    call cursor(zcur_line,zcur_clo)
endfunc

map <F10> :call SetTitle()<CR>
au BufNewFile *.py, *.cpp, *.h, *.hpp, *.sh exec ":call SetTitle()"
" au FileWritePre,BufWritePre *.cpp, *.h, *.hpp, *.py, *.sh ks|call DateModified()|'s
au FileWritePre,BufWritePre *.cpp, *.h, *.hpp, *.py, *.sh call DateModified()

"打开文件类型检测,加了这句才可以用智能补全
set completeopt=menu,menuone,longest

"Fast reloading of the .vimrc
"map <silent><leader> ss:source ~/.vimrc<cr>

"Fast editing of .vimrc
"map <silent><leader> ee:e ~/.vimrc<cr>

"when .vimrc is edited,reload it
"autocmd! bufwritepost .vimrc source ~/.vimrc

set showmatch

" 自动完成括号和引号
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {<CR>}<ESC>o
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i
function! ClosePair(char)
    if getline('.')[col('.')-1] == a:char
        return "\<Right>"
    else 
        return a:char
    endif
endfunction

" 行字符数超过120就把字符的背景设置为红色
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%121v.\+/

" 标示不必要的空白字符,autocmd可以缩写为au
" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" 基于语法或缩进进行代码折叠
" set foldmethod=indent
set foldmethod=syntax
" 启动vim时关闭折叠
set nofoldenable

"winmanager
let g:winManagerWindowLayout='TagList,FileExplorer'
let g:winManagerWidth=40
nmap <C-W><C-F> :FirstExplorerWindow<CR>
nmap <C-W><C-B> :BottomExplorerWindow<CR>
nmap wm :WMToggle<CR>

"minibuferpl.vim for top buff list
let g:miniBufExplMapWindowNavVim=1

" .cpp和.h之间切换
nmap <silent><leader>sw :FSHere<CR>

"配色
colors zenburn

" 看到折叠代码的文档字符串
let g:SimpylFold_docstring_preview=1

" NERDTree
map <F3> :NERDTreeMirror<CR>
map <F3> :NERDTreeToggle<CR>
let g:NERDTreeWinPos="right"
let g:NERDTreeWinSize=25
let g:NERDTreeShowLineNumbers=1
let g:neocomplcache_enable_at_startup=1
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
" 显示隐藏文件
let g:NERDTreeShowHidden=1
" 子窗口不显示冗余帮助信息
let g:NERDTreeMinimalUI=1
" 删除文件时自动删除文件对应的buffer
let g:NERDTreeAutoDeleteBuffer=1
" o 打开关闭文件或者目录
" t 在标签页中打开
" T 在后台标签页中打开
" ! 执行此文件
" p 到上层目录
" P 到根目录
" K 到第一个节点
" J 到最后一个节点
" u 打开上层目录
" m 显示文件系统菜单（添加、删除、移动操作）
" ? 帮助
" q 关闭
" I 切换是否显示隐藏文件
" F 切换是否显示文件
" B 切换是否显示书签
" f 切换是否使用文件过滤器
" R 递归刷新根结点
" r 递归刷新选中目录

" map <leader>n <plug>NERDTreeTabsToggle<CR>
" let g:nerdtree_tabs_open_on_console_startup=1

" nerdcommenter命令
" ;cc 注释当前行和选中行
" ;cn 没有发现和cc有区别
" ;c<空格>
" 如果被选区域有部分被注释,则对被选区域执行取消注释操作,其它情况执行反转注释操作
" ;cm 对被选区域用一对注释符进行注释,前面的注释对每一行都会添加注释
" ;ci 执行反转注释操作,选中区域注释部分取消注释,非注释部分添加注释
" ;cs 添加性感的注释,代码开头介绍部分通常使用该注释
" ;cy 添加注释,并复制被添加注释的部分
" ;c$ 注释当前光标到该行结尾的内容
" ;cA 跳转到该行结尾添加注释,并进入编辑模式
" ;ca 转换注释的方式,比如:/**/和//
" ;cl ;cb 左对齐和左右对齐，左右对齐主要针对/**/
" ;cu 取消注释

" powerline begin----
" let g:Powerline_colorscheme='solarized256'
let g:Powerline_symbols='fancy'
set t_Co=256
let Powerline_symbols='compatible'
" powerline end----

" gundo show undo window
nnoremap <leader>ud :GundoToggle<CR>
" let g:gundo_width=60
" let g:gundo_preview_height=40
let g:gundo_right=1

" Ctrlp
nnoremap <leader>ff :CtrlP<CR>

"----YCM begin----
" "set runtimepath+=~/.vim/bundle/YouCompleteMe
"开启YCM基于标签引擎
let g:ycm_collect_identifiers_from_tags_files=1
"注释与字符串中的内容也用于补全
let g:ycm_collect_identifiers_from_comments_and_strings=1
let g:syntastic_ignore_files=[".*\.py$"]
"语法关键字补全
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_complete_in_comments=1
let g:ycm_confirm_extra_conf=0
"映射按键,没有这个会拦截掉TAB,导致其它插件的TAB不可用
let g:ycm_key_list_select_completion=['<c-n>', '<Down']
let g:ycm_key_list_previous_completion=['<c-p>', '<Up']
"在注释输入中也能补全
let g:ycm_complete_in_comments=1
"在字符串输入中也能补全
let g:ycm_complete_in_strings=1
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'
"禁用语法检查
let g:ycm_show_diagnostics_ui=0
" python解释器路径
let g:ycm_path_to_python_interpreter='/usr/bin/python'
"回车即选中当前项
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>" |
"从第二个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=2
" 补全后自动关闭预览窗口
let g:ycm_autoclose_preview_window_after_completion=1
" 禁止匹配缓存项,每次都重新生成缓存项
let g:ycm_cache_omnifunc=0
" 离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

nnoremap <leader>yd :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>yf :YcmCompleter GoToDefinition<CR>
"跳转到定义处
nnoremap <leader>yg :YcmCompleter GoToDefinitionElseDeclaration<CR>
" show error
nnoremap <leader>ye :YcmDiags<CR>
" force to recompile files
nnoremap <leader>yr :YcmForceCompileAndDiagnostics<CR>
"----YCM end----

"----python----
"python文件中建议用空格代替TAB,且缩进应为4个空格
autocmd FileType python setlocal et sta sw=4 sts=4

" 支持PEP8风格的缩进
" au BufNewFile,BufRead *.py
""            \ set tabstop=4
""            \ set softtabstop=4
""            \ set shiftwidth=4
""            \ set textwidth=79
""            \ set expandtab
""            \ set autoindent
""            \ set fileformat=unix

"代码折叠可以只以缩进为依据:
autocmd FileType python setlocal foldmethod=indent
"默认展开所有代码
set foldlevel=99

" press space to fold/unfold code
nnoremap <space> za
vnoremap <space> zf

" 缩进指示线
let g:indentLine_char='┆'
let g:indentLine_enabled=1
" let g:indentLine_concealcursor='inc'
" let g:indentLine_concealleavel=2

